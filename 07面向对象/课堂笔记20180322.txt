
入门->初级开发人员-》高级开发人员/项目经理-》部门经理
		 --》架构师---》技术主管
                      
===============
1、构造方法/构造器
	public 类的名称(){}
	如果修饰符是private的话，代表这个类不能被实例化
	就是不能new Person();
	构造器默认第一行就是调用super();
	调用该对象的其他构造器用this();
2、this关键字
	引用该类的对象
	Person{
		String nanme;
		move(){}
		eat(){
			this.name="ddd";
			this.move();
		}
	}

	Person p=new Person();
	p.eat();
3、super关键字
	对父类对象的引用
	super();//父类的构造器
	super(name,id);
	super.eat();//父类的方法
	super.name;//父类的成员变量
4、案例
	
======================
1、抽象类
	1、概念
		父类不知道子类怎么实现我的方法，或者
		实现的方式有多样；
		要求子类必须要实现；

	2、定义格式
		public abstarct class l类名{

		}

		abstarct可以用来修饰类--》抽象类
		abstract 可以用来修饰方法-->抽象方法
	3、特点：
		1、抽象类中不一定有抽象方法；
		有抽象方法的类肯定是抽象类；
		有抽象方法的类，肯定是一个抽象类
		2、抽象类可以构造器？、成员变量、普通方法、抽象方法
			抽象类不能被实例化对象
			（可以理解成：构造器被私有了）
	4、有抽象类，就要求必须有子类来继承
	5、抽象类相当于一个模板，要子类必须按照模板来实现。	
2、final
	1、概念
		不想让子类来实现或者继承的时候，用final来修饰
		最终
	2、格式
		final   可以修饰类、修饰方法、修饰成员变量
	3、修饰类：不让其他类来继承它
	4、修饰方法：这个方法就不能被子类重写
	5、修饰变量：这个变量叫做常量，只能被赋值一次
		常量名建议用大写
3、static
	1、调用类里面的方法  new一个对象.eat();
		Person p=new Person();
		p.eat();
		->Person.eat();//用static 修饰eat方法即可
	2、static 一般用来修饰成员变量及方法
		修饰成员变量--->静态变量
		修饰方法--->静态方法
	3、调用静态常量、静态方法
		通过类名.静态常量来调用
		通过类名.静态方法来调用
	4、static + final修饰
		修饰变量--》静态常量
		修饰方法--》子类不能重写该方法
4、匿名对象
	Person p=new Person();
	p叫对象
	匿名对象：创建对象时没有赋值给变量
		new Person();
	匿名对象只能被使用一次；
	为什么这么写：
	1、简化代码编写
	Person p=new Person();
	p.eat();
	...p
	.....
	-->new Person().eat();
	2、作为参数进行传递
		Person p=new Person(new Man());
	3、或者作为方法的返回值
		public Man marry(){
			return new Man();
		}
	4、new Person().eat().move();
5、内部类
	1、概念
		写在类内部的类
		class A{
			String name;
			class B{//内部类

			}

			eat(){
			  class C{//内部类

			  }
			}
		}
	2、编译后的文件

	
6、代码块{}
	一个类
	Person{//代码块

		static{
			//静态代码块
		}
		
		{
			//代码块
		}

		public Person(){
			//代码块
		}

		 public void eat(){
			//代码块
		 }





	}
